-- Create the database and switch to it
create database bankezy;
use bankezy;

-- Table for roles
create table roles (
    role_id int not null auto_increment primary key,
    role_name varchar(50) not null,
    description text,
    created_at timestamp,
    updated_at timestamp default now()
);

-- Table for employees
create table employees (
    employee_id int not null auto_increment primary key,
    first_name varchar(50) not null,
    last_name varchar(50) not null,
    email varchar(255) not null unique,
    role_id int not null,
    created_at timestamp,
    updated_at timestamp default now(),
    foreign key (role_id) references roles(role_id) on delete cascade
);

-- Table for users
create table users (
    user_id int not null auto_increment primary key,
    first_name varchar(50) not null,
    last_name varchar(50) not null,
    email varchar(255) not null unique,
    password varchar(255) not null,
    token varchar(255) null,
    code int null,
    verified int default 0,
    verified_at datetime,
    employee_id int,
    role_id int not null, -- New column for role
    created_at timestamp,
    updated_at timestamp default now(),
    foreign key (employee_id) references employees(employee_id) on delete set null,
    foreign key (role_id) references roles(role_id) on delete cascade -- New relationship
);

-- Table for accounts
create table accounts (
    account_id int not null auto_increment primary key,
    user_id int,
    account_number varchar(100) not null,
    account_name varchar(50) not null,
    account_type varchar(50) not null,
    balance decimal(18,2) default 0.00,
    created_at timestamp,
    updated_at timestamp default now(),
    foreign key (user_id) references users(user_id) on delete cascade
);

-- Table for transaction history
create table transaction_history (
    transaction_id int not null auto_increment primary key,
    account_id int,
    transaction_type varchar(50) not null,
    amount decimal(18,2),
    source varchar(50) null,
    status varchar(50) null,
    reason_code varchar(100) null,
    created_at timestamp,
    foreign key (account_id) references accounts(account_id) on delete cascade
);

-- Table for payments
create table payments (
    payment_id int not null auto_increment primary key,
    account_id int,
    beneficiary varchar(50) null,
    beneficiary_acc_no varchar(255) null,
    amount decimal(18,2) null,
    reference_no varchar(100) null,
    status varchar(50) null,
    reason_code varchar(100) null,
    created_at timestamp,
    foreign key (account_id) references accounts(account_id) on delete cascade
);

-- View for transaction history
create view v_transaction_history as
select 
    t.transaction_id,
    a.account_id,
    u.user_id,
    t.transaction_type,
    t.amount,
    t.source,
    t.status,
    t.reason_code,
    t.created_at
from
    transaction_history as t
inner join
    accounts as a
on
    t.account_id = a.account_id
inner join
    users as u
on 
    a.user_id = u.user_id;

-- View for payment history
create view v_payments as
select 
    p.payment_id,
    a.account_id,
    u.user_id,
    p.beneficiary,
    p.beneficiary_acc_no,
    p.amount,
    p.status,
    p.reference_no,
    p.reason_code,
    p.created_at
from 
    payments as p
inner join 
    accounts as a
on
    p.account_id = a.account_id
inner join
    users as u
on
    a.user_id = u.user_id;